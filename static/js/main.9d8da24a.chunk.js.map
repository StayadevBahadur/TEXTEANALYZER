{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","AboutText","onClick","toggleMode","role","htmlFor","Alert","alert","word","charAt","toUpperCase","slice","message","TextForm","text","SetText","useState","emails","setEmails","numC","Ted","count","i","length","findL","heading","onChange","event","target","value","style","backgroundColor","color","rows","handleUpClick","newText","toLowerCase","showAlert","handleButtonClick","extractedEmails","match","extractEmails","handleCopy","document","getElementById","select","navigator","clipboard","writeText","trim","split","map","email","index","key","defaultProps","App","setmodoe","setalert","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","createElement","StrictMode"],"mappings":"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","file":"static/js/main.9d8da24a.chunk.js","sourcesContent":["import * as React from 'react';\r\n// import{React}  from 'react'\r\n// import {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route,\r\n//   Link\r\n// } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n\r\n  \r\n  \r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">{props.AboutText}</a>\r\n              </li>\r\n            </ul>\r\n            <div className={`form-check form-switch mx-2 text-${props.mode ==='light'?'dark':'light' } `}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" onClick ={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark mode</label> \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav></>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  AboutText: PropTypes.string,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  AboutText: \"Set about text \",\r\n}\r\n\r\n\r\n","// import React from 'react'\r\nimport * as React from 'react';\r\n\r\n\r\nexport default function Alert(props) {\r\n  const capitlaize =(word)=>{\r\n   let cpaword = word.charAt(0).toUpperCase()+ word.slice(1);\r\n  // let lowerWord = word.toLowerCase();\r\n   return cpaword;\r\n  }\r\n  return (\r\n    \r\n  props.alert &&  <div className={`alert alert-${props.alert.type}`} role=\"alert\">\r\n       <strong>{capitlaize(props.alert.type)}</strong> : {props.alert.message}\r\n    </div>\r\n\r\n\r\n    \r\n  )\r\n}\r\n","import * as React from 'react';\r\n// import {React} from 'react'\r\nimport { useState } from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text, SetText] = useState('');\r\n    const [emails, setEmails] = useState([]);\r\n\r\n    \r\n// Function to count words\r\n    const findL = (Ted) => {\r\n        let count = 0;\r\n        let i = 0;\r\n        while (i < Ted.length) {\r\n            if (Ted[i] === \" \") {\r\n\r\n            } else {\r\n                count++;\r\n            }\r\n            i++;\r\n        }\r\n        return count;\r\n    };\r\n\r\n    let numC = findL(text);\r\n// Function for converting to upperCase\r\n    const handleUpClick = () => {\r\n       \r\n        let newText;\r\n        if (text === text.toUpperCase()) {\r\n            newText = text.toLowerCase();\r\n        } else {\r\n            newText = text.toUpperCase();\r\n            props.showAlert(\"Converted to UpperCase\",\"success\")\r\n        }\r\n        SetText(newText)\r\n    }\r\n    const handleOnchange = (event) => {\r\n        SetText(event.target.value)\r\n\r\n    }\r\n    // Email Extracter function\r\n    function extractEmails(text) {\r\n        const emailRegex = /[a-zA-Z0-9._%*#&+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g;\r\n        return text.match(emailRegex);\r\n    }\r\n\r\n\r\n    const handleButtonClick = () => {\r\n        const extractedEmails = extractEmails(text);\r\n        setEmails(extractedEmails || []);\r\n    };\r\n    //Function for copy the text\r\n\r\n    const handleCopy = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <h1 className={`mx-4 text-${props.mode === 'light' ? 'dark' : 'light'}`}>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"myBox\" className=\"form-label mx-4\"></label>\r\n                    <textarea className=\"form-control mx-4 \" onChange={handleOnchange} style={{backgroundColor:props.mode === 'light' ? 'white' : '#121212', color:props.mode === 'light' ? 'black' : 'white'}} rows=\"8\" id=\"myBox\" value={text}> </textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-4\" onClick={handleUpClick} >Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary \" onClick={handleButtonClick}>Extract all the email</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>CopyText</button>\r\n            </div>\r\n            <div className=\"container mx-3 my-2\">\r\n                <h1 className={`text-${props.mode === 'light' ? 'dark' : 'light'}`}>Your text summary</h1>\r\n                <p className={`text-${props.mode === 'light' ? 'dark' : 'light'}`} color={`${props.mode === 'light' ? 'dark' : 'light'}`}>{text.trim().split(/\\s+/).length} words and {numC} characters</p>\r\n                <p className={`text-${props.mode === 'light' ? 'dark' : 'light'}`} color={`${props.mode === 'light' ? 'dark' : 'light'}`}>{0.008 * text.split(\" \").length} minitues to read</p>\r\n                <div>\r\n                    <h2 className={`text-${props.mode === 'light' ? 'dark' : 'light'}`}>Extracted Emails:</h2>\r\n                    <ul>\r\n                        {emails.map((email, index) => (\r\n                            <li key={index} className={`text-${props.mode === 'light' ? 'dark' : 'light'}`}>{email} </li>// for react it is neccesery to give keys\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n                <h3 className={`text-${props.mode === 'light' ? 'dark' : 'light'}`}>Preview</h3>\r\n                <p className={`text-${props.mode === 'light' ? 'dark' : 'light'}`}>{text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","// import {React} from 'react';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\n import TextForm from './components/TextForm';\n// import {\n//   BrowserRouter as Router,\n//   Route,\n//   Routes\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmodoe] = useState('light');\n  const [alert, setalert] = useState(null)\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmodoe('dark')\n      document.body.style.backgroundColor = \"#121212\";\n      showAlert(\"Dark mode is enabled\", \"success\")\n    } else {\n      setmodoe('light')\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"light mode is enabled\", \"success\")\n    }\n  }\n  const showAlert = (message, type) => {\n    setalert({\n      message: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null)\n    }, 1000)\n\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextAnalyzer N\" AboutText=\"AboutTextAnalyzer\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container\">\n        <TextForm heading=\"Enter your text to analyze\" mode={mode} showAlert={showAlert} />\n          {/* <Routes>\n            <Route path=\"/about\" element={<About />} />\n            <Route exact path=\"/\" element={<TextForm heading=\"Enter your text to analyze\" mode={mode} showAlert={showAlert} />}/>\n          </Routes> */}\n        </div>\n\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n// the above line says that wherever there is element with id root render app component in it \nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}